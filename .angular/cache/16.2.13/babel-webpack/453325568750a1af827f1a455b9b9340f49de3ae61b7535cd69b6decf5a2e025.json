{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment.prod';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  get isLogged() {\n    return !!this.user;\n  }\n  constructor(http) {\n    this.http = http;\n    this.user$$ = new BehaviorSubject(undefined);\n    this.user$ = this.user$$.asObservable();\n    this.apiUrl = environment.apiUrl;\n    this.USER_KEY = '[user]';\n    this.userSub = this.user$.subscribe(user => {\n      this.user = user;\n    });\n    try {\n      const localStorageUser = localStorage.getItem(this.USER_KEY) || '';\n      this.user = JSON.parse(localStorageUser);\n    } catch (error) {\n      this.user = undefined;\n    }\n  }\n  login$(email, password) {\n    return this.http.post(`${this.apiUrl}/users/login`, {\n      email,\n      password\n    }).pipe(tap(response => {\n      this.user$$.next(response);\n      this.user = response;\n      localStorage.setItem(this.USER_KEY, JSON.stringify(this.user));\n    }));\n  }\n  register$(email, password) {\n    return this.http.post(`${this.apiUrl}/users/register`, {\n      email,\n      password\n    }).pipe(tap(response => {\n      this.user$$.next({\n        email: response.email,\n        accessToken: response.accessToken,\n        _id: response._id\n      });\n      this.user = {\n        email: response.email,\n        accessToken: response.accessToken,\n        _id: response._id\n      };\n      localStorage.setItem(this.USER_KEY, JSON.stringify(this.user));\n    }));\n  }\n  logout$() {\n    this.user = undefined;\n    localStorage.removeItem(this.USER_KEY);\n    return this.http.post(`${this.apiUrl}/users/logout`, {});\n  }\n  getUser() {\n    return this.http.get(`${this.apiUrl}/users/me`);\n  }\n  ngOnDestroy() {\n    this.userSub.unsubscribe();\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","tap","environment","UserService","isLogged","user","constructor","http","user$$","undefined","user$","asObservable","apiUrl","USER_KEY","userSub","subscribe","localStorageUser","localStorage","getItem","JSON","parse","error","login$","email","password","post","pipe","response","next","setItem","stringify","register$","accessToken","_id","logout$","removeItem","getUser","get","ngOnDestroy","unsubscribe","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\eddym\\OneDrive\\Desktop\\angular-exam\\angular-exam\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject, Observable, Subscription, tap } from 'rxjs';\nimport { LoginAuthUser, RegisterAuthUser } from '../types/user';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from 'src/environments/environment.prod';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService implements OnDestroy {\n  private user$$ = new BehaviorSubject<LoginAuthUser | undefined>(undefined);\n  private user$ = this.user$$.asObservable()\n\n  apiUrl = environment.apiUrl;\n\n  USER_KEY = '[user]'\n  user: LoginAuthUser | undefined\n  userSub: Subscription;\n\n  get isLogged(): boolean {\n    return !!this.user;\n  }\n\n  constructor(private http: HttpClient) {\n    this.userSub = this.user$.subscribe((user) => {\n      this.user = user;\n    });\n\n    try {\n      const localStorageUser = localStorage.getItem(this.USER_KEY) || '';\n      this.user = JSON.parse(localStorageUser);\n    } catch (error) {\n      this.user = undefined;\n    }\n  }\n\n  login$(email: string, password: string): Observable<any> {\n    return this.http.post<LoginAuthUser>(`${this.apiUrl}/users/login`, { email, password })\n      .pipe(tap((response) => {\n        this.user$$.next(response);\n        this.user = response;\n        localStorage.setItem(this.USER_KEY, JSON.stringify(this.user));\n      })\n      )\n  }\n\n  register$(email: string, password: string): Observable<any> {\n    return this.http.post<RegisterAuthUser>(`${this.apiUrl}/users/register`, { email, password })\n      .pipe(tap((response) => {\n        this.user$$.next({\n          email: response.email,\n          accessToken: response.accessToken,\n          _id: response._id\n        });\n        this.user = {\n          email: response.email,\n          accessToken: response.accessToken,\n          _id: response._id,\n        };\n        localStorage.setItem(this.USER_KEY, JSON.stringify(this.user));\n      }))\n  }\n\n  logout$() {\n    this.user = undefined;\n    localStorage.removeItem(this.USER_KEY);\n\n    return this.http.post(`${this.apiUrl}/users/logout`, {})\n  }\n\n  getUser(): any {\n    return this.http.get(`${this.apiUrl}/users/me`)\n  }\n\n  ngOnDestroy(): void {\n    this.userSub.unsubscribe()\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}